#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
#include "esp_camera.h"

// 1. Defines and Pin Assignments
// -----------------------------
#define SDA_PIN 21
#define SCL_PIN 22
#define PCA9685_ADDRESS 0x40

#define SERVO_BASE 0
#define SERVO_SHOULDER 1
#define SERVO_ELBOW 2
#define SERVO_WRIST_ROTATE 3
#define SERVO_GRIPPER 4

#define SERVO_NEUTRAL_PULSE 1500

// Camera defines (Arducam 64MP - REPLACE WITH YOUR CAMERA'S CONFIGURATION)
#define CAMERA_PIXEL_FORMAT PIXFORMAT_JPEG // Or YUV422, etc.
#define CAMERA_FRAME_SIZE   FRAMESIZE_UXGA // Or other size

// Stepper motor pins (XIAO ESP32S3 to ULN2003 -  from image)
#define STEPPER_IN1 5
#define STEPPER_IN2 6
#define STEPPER_IN3 7
#define STEPPER_IN4 8

// 2. Global Variables
// ------------------
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(PCA9685_ADDRESS);
camera_config_t camera_config;

// Stepper motor variables
int stepperSpeed = 5;
int stepperDirection = 0;
unsigned long lastStepTime = 0;
const unsigned long stepInterval = 10;

// 3. Function Declarations
// ----------------------
void setupServos();
void setServoSpeed(int servoChannel, int speed);
void setupCamera();
camera_fb_t * captureImage();
void releaseImage(camera_fb_t *fb);
void setupStepper();
void moveStepper();
void moveConveyor(int direction, int speed);
void stopConveyor();
void moveArmTo(int baseSpeed, int shoulderSpeed, int elbowSpeed, int wristRotateSpeed, int gripperSpeed);
void stopArm();

// 4. setup()
// --------
void setup() {
  Serial.begin(115200);
  Wire.begin(SDA_PIN, SCL_PIN);

  setupServos();
  setupCamera();
  setupStepper();

  Serial.println("Setup complete.");
}

// 5. Servo Functions
// ------------------
void setupServos() {
  pwm.begin();
  pwm.setOscillatorFrequency(27000000);
  pwm.setPWMFreq(50);
  setServoSpeed(SERVO_BASE, 0);
  setServoSpeed(SERVO_SHOULDER, 0);
  setServoSpeed(SERVO_ELBOW, 0);
  setServoSpeed(SERVO_WRIST_ROTATE, 0);
  setServoSpeed(SERVO_GRIPPER, 0);
  delay(500);
}

void setServoSpeed(int servoChannel, int speed) {
  // speed: -255 to 255, 0 is stop
  int pulseWidth = SERVO_NEUTRAL_PULSE + (speed * 5); // Adjust the '5'
  if (pulseWidth < 600) pulseWidth = 600;           //  AND THESE LIMITS
  if (pulseWidth > 2400) pulseWidth = 2400;          //  FOR YOUR SERVOS.
  pwm.setPWM(servoChannel, 0, map(pulseWidth, 0, 20480, 0, 4095));
}

// 6. Camera Functions
// ------------------
void setupCamera() {
  // *** REPLACE THIS WITH YOUR ARDUCAM 64MP CONFIGURATION ***
  camera_config.ledc_channel = LEDC_CHANNEL_0;
  camera_config.ledc_timer   = LEDC_TIMER_0;
  camera_config.pin_d0       = 2;  // Example pin - REPLACE
  camera_config.pin_d1       = 3;  // Example pin - REPLACE
  camera_config.pin_d2       = 4;  // Example pin - REPLACE
  camera_config.pin_d3       = 5;  // Example pin - REPLACE
  camera_config.pin_d4       = 6;  // Example pin - REPLACE
  camera_config.pin_d5       = 7;  // Example pin - REPLACE
  camera_config.pin_d6       = 8;  // Example pin - REPLACE
  camera_config.pin_d7       = 9;  // Example pin - REPLACE
  camera_config.pin_xclk     = 21;  // Example pin - REPLACE
  camera_config.xclk_freq_hz = 20000000;
  camera_config.pin_pclk     = 15;  // Example pin - REPLACE
  camera_config.pin_vsync    = 16;  // Example pin - REPLACE
  camera_config.pin_href     = 17;  // Example pin - REPLACE
  camera_config.pin_ss       = 14;  // Example pin - REPLACE
  camera_config.yuv_transfer_mode = 0;
  camera_config.jpeg_quality = 10;
  camera_config.fb_count = 2;
  camera_config.pixel_format = CAMERA_PIXEL_FORMAT;
  camera_config.frame_size   = CAMERA_FRAME_SIZE;
    camera_config.sccb_i2c_address = 0x30;
  camera_config.sccb_i2c_sda_pin = SDA_PIN;
  camera_config.sccb_i2c_scl_pin = SCL_PIN;

  esp_err_t err = esp_camera_init(&camera_config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed: 0x%x\n", err);
    return;
  }
}

camera_fb_t * captureImage() {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return nullptr;
  }
  return fb;
}

void releaseImage(camera_fb_t *fb) {
  esp_camera_fb_return(fb);
}

// 7. Stepper Motor Functions
// ----------------------
void setupStepper() {
  // Set stepper motor pins as output
  pinMode(STEPPER_IN1, OUTPUT);
  pinMode(STEPPER_IN2, OUTPUT);
  pinMode(STEPPER_IN3, OUTPUT);
  pinMode(STEPPER_IN4, OUTPUT);
  stopConveyor();
}

// 28BYJ-48 Stepper Motor Sequence (Full Step)
const int stepperSequence[8][4] = {
  {1, 0, 0, 0},
  {1, 1, 0, 0},
  {0, 1, 0, 0},
  {0, 1, 1, 0},
  {0, 0, 1, 0},
  {0, 0, 1, 1},
  {0, 0, 0, 1},
  {1, 0, 0, 1}
};

int currentStep = 0;

void moveStepper() {
  if (stepperDirection == 0) return;

  unsigned long currentTime = millis();
  if (currentTime - lastStepTime >= stepInterval) {
    lastStepTime = currentTime;

    if (stepperDirection == 1) {
      currentStep = (currentStep + 1) % 8;
    } else {
      currentStep = (currentStep + 7) % 8;
    }

    digitalWrite(STEPPER_IN1, stepperSequence[currentStep][0]);
    digitalWrite(STEPPER_IN2, stepperSequence[currentStep][1]);
    digitalWrite(STEPPER_IN3, stepperSequence[currentStep][2]);
    digitalWrite(STEPPER_IN4, stepperSequence[currentStep][3]);
  }
}

void moveConveyor(int direction, int speed) {
  // direction: 1 (forward), -1 (backward), 0 (stop)
  // speed: 0 to 255
  stepperDirection = direction;
  stepperSpeed = speed;

  if (speed == 0) {
    stopConveyor();
  } else {
    unsigned long calculatedInterval = map(speed, 1, 255, 100, 10); // Adjust 100 and 10
    if (calculatedInterval < 10) calculatedInterval = 10;
    stepInterval = calculatedInterval;
  }
}

void stopConveyor() {
  stepperDirection = 0;
  digitalWrite(STEPPER_IN1, LOW);
  digitalWrite(STEPPER_IN2, LOW);
  digitalWrite(STEPPER_IN3, LOW);
  digitalWrite(STEPPER_IN4, LOW);
}

// 8. Arm Control Functions
// ----------------------
void moveArmTo(int baseSpeed, int shoulderSpeed, int elbowSpeed, int wristRotateSpeed, int gripperSpeed) {
  setServoSpeed(SERVO_BASE, baseSpeed);
  setServoSpeed(SERVO_SHOULDER, shoulderSpeed);
  setServoSpeed(SERVO_ELBOW, elbowSpeed);
  setServoSpeed(SERVO_WRIST_ROTATE, wristRotateSpeed);
  setServoSpeed(SERVO_GRIPPER, gripperSpeed);
}

void stopArm() {
  setServoSpeed(SERVO_BASE, 0);
  setServoSpeed(SERVO_SHOULDER, 0);
  setServoSpeed(SERVO_ELBOW, 0);
  setServoSpeed(SERVO_WRIST_ROTATE, 0);
  setServoSpeed(SERVO_GRIPPER, 0);
}

// 9. loop()
// ---------
void loop() {
  moveStepper(); // Call this repeatedly to move the stepper

  // Example sequence:
  Serial.println("Moving arm to pickup position...");
  moveArmTo(50, 30, 20, 0, 0);
  delay(2000);

  Serial.println("Moving conveyor forward...");
  moveConveyor(1, 100);
  delay(3000);

  Serial.println("Stopping conveyor...");
  stopConveyor();
  delay(1000);

  Serial.println("Capturing image...");
  camera_fb_t *frame = captureImage();
  if (frame) {
    Serial.printf("Captured image: %u bytes\n", frame->len);
    //  *** YOU MUST PROCESS THE IMAGE DATA HERE  ***
    releaseImage(frame);
  } else {
    Serial.println("Failed to capture image!");
  }

  Serial.println("Moving arm to drop-off position...");
  moveArmTo(-50, -30, -20, 0, 0);
  delay(2000);

  Serial.println("Moving conveyor backward...");
  moveConveyor(-1, 100);
  delay(3000);

  stopConveyor();
  delay(1000);
}
